@page "/"
@using Microsoft.AspNetCore.Components.Web
@namespace Sample.Pages
@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <base href="~/" />
    <link rel="stylesheet" href="css/bootstrap/bootstrap.min.css" />
    <link href="css/site.css" rel="stylesheet" />
    <link href="Sample.styles.css" rel="stylesheet" />
    <link rel="icon" type="image/png" href="favicon.png"/>
    <link href="https://cdn.syncfusion.com/blazor/23.2.7/styles/bootstrap4.css" rel="stylesheet" />
    <script src="https://cdn.syncfusion.com/blazor/23.2.7/syncfusion-blazor.min.js" type="text/javascript"></script>
    <component type="typeof(HeadOutlet)" render-mode="ServerPrerendered" />
</head>
<body>
    <component type="typeof(App)" render-mode="ServerPrerendered" />

    <div id="blazor-error-ui">
        <environment include="Staging,Production">
            An error has occurred. This application may no longer respond until reloaded.
        </environment>
        <environment include="Development">
            An unhandled exception has occurred. See browser dev tools for details.
        </environment>
        <a href="" class="reload">Reload</a>
        <a class="dismiss">🗙</a>
    </div>

    <script src="_framework/blazor.server.js"></script>
    <script>
     function customizePath() {
         var pathLineElement = document.getElementById("Linear_AxisLine_0");
         var pathBarElement = document.getElementById("Linear_AxisIndex_0_Bar_0");
         var majorTickLineElement = document.getElementById("Linear_MinorTicksLine_0");
         var majorTickLineWidth = majorTickLineElement.getAttribute("stroke-width")
         var tickWidth = parseInt(majorTickLineWidth) / 4;
         if (pathLineElement) {
             var linePath = pathLineElement.getAttribute("d");
             var parts = linePath.split(/\s+/);
             var lineX = parts[0].split('M')[1] - tickWidth;
             parts[0] = "M" + lineX.toString();
             for (var i = 0; i < parts.length; i++) {
                 
                 if (parts[i] === "L" && parts[i + 1] !== undefined) {
                     var x = parseFloat(parts[i + 1]);
                     x = x + tickWidth;
                     parts[i + 1] = x.toString();
                 }
             }
             var modifiedPathData = parts.join(" ");
             pathLineElement.setAttribute("d", modifiedPathData)
             var barPath = pathBarElement.getAttribute("x");
             var xValue = parseFloat(barPath);
             var barXValue = xValue - tickWidth;
             pathBarElement.setAttribute("x", barXValue);
         }
     }
     </script>
</body>
</html>
